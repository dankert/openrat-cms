import $ from '../jquery-global.min.js';
import Dialog from './dialog.min.js';
import View from './view.min.js';
import Callback from './callback.min.js';
import WorkbenchNavigator from "./navigator.min.js";
import Notice from "./notice.min.js";
import Components from "./components.min.js";
export default class Workbench {
'use strict'; 
static state = {
action: '',
id: 0,
extra: {}
};
static dialog;
static instance;
constructor() {
this.popupWindow = null;
Callback.dataChangedHandler.add( () => {
if   ( Workbench.popupWindow )
Workbench.popupWindow.location.reload();
} );
}
static getInstance() {
if   ( ! Workbench.instance )
Workbench.instance = new Workbench();
return Workbench.instance;
}
initialize() {
this.checkBrowserRequirements();
this.initializeState();
$('html').removeClass('nojs');
$('.or--initial-hidden').removeClass('-initial-hidden');
window.onpopstate = ev => {
console.debug("Event after navigating",ev);
this.closeDialog();
this.closeMenu();
this.loadNewActionState(ev.state);
};
this.registerWorkbench();
this.initializeTheme();
this.initializeStartupNotices();
this.initializeEvents();
this.initializeKeystrokes();
this.reloadAll().then( () => {
Callback.afterNewActionHandler.fire();
}
);
this.initializePingTimer();
this.initializeDirtyWarning();
console.info('Application started');
}
initializeTheme() {
if (window.localStorage) {
let style = window.localStorage.getItem('ui.style');
if (style)
this.setUserStyle(style);
}
}
initializeDirtyWarning() {
window.addEventListener('beforeunload', function (e) {
if   ( $('.or-view--is-dirty').length > 0 ) {
e.preventDefault(); 
return 'Unsaved content will be lost.';
}
else {
return undefined; 
}
});
}
registerWorkbench() {
window.OpenRat = { workbench: this };
}
initializeState() {
let parts = window.location.hash.split('/');
let state = { action:'index',id:0 };
if   ( parts.length >= 2 )
state.action = parts[1].toLowerCase();
if   ( parts.length >= 3 )
state.id = parts[2].replace(/[^0-9_]/gim,"");
Workbench.state = state;
WorkbenchNavigator.toActualHistory( state );
}
checkBrowserRequirements() {
if   ( ! window.Promise ) {
console.error('This browser does not support Promises, which is required for this application.' );
let notice = new Notice();
notice.msg = 'This browser is not supported';
notice.msg = 'Promises are not available';
notice.show();
}
if   ( ! window.fetch ) {
console.error('This browser does not support the fetch API, which is required for this application.' );
let notice = new Notice();
notice.setStatus('error');
notice.msg = 'This browser is not supported';
notice.log = 'Fetch API is not available';
notice.show();
}
}
initializePingTimer() {
let ping = async () => {
let url = View.createUrl('profile', 'ping' );
console.debug('ping');
try {
let response = await fetch( url,{
method: 'GET',
headers: {
'Accept': 'application/json',
}
}  );
if   ( !response.ok )
throw "ping failed";
} catch( cause ) {
console.warn( {message: 'The server ping has failed.',cause:cause });
if ($('.or-view--is-dirty').length > 0) {
window.alert("The server session is lost, please save your data.");
}
else {
}
}
}
let timeoutMinutes = 5;
window.setInterval( ping, timeoutMinutes*60*1000 );
}
loadNewActionState(state) {
console.debug("New state",state);
Workbench.state = state;
this.reloadViews();
this.filterMenus();
Callback.afterNewActionHandler.fire();
}
closeDialog() {
if   ( Workbench.dialog ) {
Workbench.dialog.close();
Workbench.dialog = null;
}
}
createDialog() {
this.closeDialog();
Workbench.dialog = new Dialog();
return Workbench.dialog;
}
reloadViews() {
this.startSpinner();
let promise = this.loadViews( $('.or-workbench .or-act-view-loader') );
promise.then(
() => this.stopSpinner()
);
return promise;
}
startSpinner() {
$('.or-workbench-loader').addClass('loader').addClass('loader--is-active');
}
stopSpinner() {
$('.or-workbench-loader').removeClass('loader').removeClass('loader--is-active');
}
reloadAll() {
this.startSpinner();
let promise = this.loadViews( $('.or-act-view-loader,.or-act-view-static') );
console.debug('reloading all views');
let stylePromise    = this.loadUserStyle();
let languagePromise = this.loadLanguage();
let settingsPromise = this.loadUISettings();
let all = Promise.all( [ promise,stylePromise,languagePromise,settingsPromise ] );
all.then(
() => this.stopSpinner()
);
return all;
}
async loadUserStyle() {
let url = View.createUrl('profile', 'userinfo' );
let response = await fetch(url,{
method: 'GET',
headers: {
'Accept': 'application/json',
}
});
let json = await response.json();
let style = json.output['style'];
this.setUserStyle(style);
let color = json.output['theme-color'];
this.setThemeColor(color);
}
static settings = {};
static language = {};
async loadLanguage() {
let url = View.createUrl('profile', 'language');
let response = await fetch(url,{
method: 'GET',
headers: {
'Accept': 'application/json',
}
}
);
let data     = await response.json();
Workbench.language = data.output.language;
}
async loadUISettings() {
let url = View.createUrl('profile', 'uisettings' );
let response = await fetch(url,{
method: 'GET',
headers: {
'Accept': 'application/json',
}
});
let data = await response.json();
Workbench.settings = data.output.settings.settings;
}
loadViews( $views )
{
let wb = this;
let promises = [];
$views.each(function (idx) {
let $targetDOMElement = $(this);
promises.push( wb.loadNewActionIntoElement( $targetDOMElement ) );
});
let all = Promise.all( promises );
return all;
}
loadNewActionIntoElement( $viewElement )
{
let action;
if   ( $viewElement.is('.or-act-view-static') )
action = $viewElement.attr('data-action');
else
action = Workbench.state.action;
let id     = Workbench.state.id;
let params =  Workbench.state.extra;
let method = $viewElement.data('method');
let view = new View( action,method,id,params );
return view.start( $viewElement );
}
setUserStyle( styleName )
{
if   ( window.localStorage )
window.localStorage.setItem('ui.style',styleName);
let styleUrl = View.createUrl('index', 'themestyle', 0, {'style': styleName});
document.getElementById('user-style').setAttribute('href',styleUrl);
}
setThemeColor( color )
{
document.getElementById('theme-color').setAttribute('content',color);
}
static setApplicationTitle( newTitle ) {
let title = document.querySelector('head > title');
let defaultTitle = title.dataset.default;
title.textContent = (newTitle ? newTitle + ' - ' : '') + defaultTitle;
}
static registerOpenClose = function( $el )
{
$($el).children('.or-collapsible-act-switch').click( function() {
let $group = $(this).closest('.or-collapsible');
if   ( $group.hasClass('collapsible--is-visible') ) {
$group.removeClass('collapsible--is-visible');
setTimeout( () => {
$group.removeClass('collapsible--is-open');
},300 );
}
else {
$group.addClass('collapsible--is-open');
$group.addClass('collapsible--is-visible');
}
});
}
openNewAction( name,action,id )
{
$('.or-workbench-navigation').removeClass('workbench-navigation--is-open');
Workbench.setApplicationTitle( name ); 
let newState = {'action':action, 'id':id };
this.loadNewActionState( newState );
WorkbenchNavigator.navigateToNew( newState );
}
registerDraggable(viewEl) {
$(viewEl).find('.or-draggable').attr('draggable','true')
.on('dragstart',(e)=>{
$('.or-workbench').addClass('workbench--drag-active');
let link = e.currentTarget;
e.dataTransfer.effectAllowed = 'link';
e.dataTransfer.setData('id'    , link.dataset.id    );
e.dataTransfer.setData('action', link.dataset.action);
e.dataTransfer.setData('name'  , link.dataset.name || link.textContent.trim()   );
console.debug('drag started',e.dataTransfer);
})
.on('drag',(e)=>{
})
.on('dragend',(e)=>{
$('.or-workbench').removeClass('workbench--drag-active');
});
}
registerDroppable(viewEl) {
$(viewEl).find('.or-droppable-selector').on('dragover', (e) => {
e.preventDefault();
}).on('drop', (event) => {
let id = event.dataTransfer.getData('id');
if   ( !id) {
console.debug("dropped object has no object id, ignoring");
return;
}
let name = event.dataTransfer.getData('name');
if (!name)
name = id;
console.debug("dropped",id,name,event.dataTransfer );
$(event.currentTarget).find('.or-selector-link-value').val(id);
$(event.currentTarget).find('.or-selector-link-name').val(name).attr('placeholder', name);
event.preventDefault();
});
$(viewEl).find('.or-droppable')
}
registerAsDroppable( el, onDrop ) {
el.addEventListener('dragover', (e) => {
e.preventDefault();
});
el.addEventListener('dragenter', (e) => {
e.stopPropagation();
e.preventDefault();
e.currentTarget.classList.add('or-workbench--drop-active');
});
el.addEventListener('dragleave', (e) => {
e.stopPropagation();
e.preventDefault();
e.currentTarget.classList.remove('or-workbench--drop-active');
});
el.addEventListener('drop', onDrop);
}
static htmlDecode(input) {
let doc = new DOMParser().parseFromString(input, "text/html");
return doc.documentElement.textContent;
}
async filterMenus() {
let action = Workbench.state.action;
let id = Workbench.state.id;
$('.or-workbench-title .or-dropdown-entry.or-act-clickable').addClass('dropdown-entry--active');
$('.or-workbench-title .or-filtered').removeClass('dropdown-entry--active').addClass('dropdown-entry--inactive');
$('.or-workbench-title .or-filtered .or-link').attr('data-id', id);
let url = View.createUrl('profile', 'available', id, {'queryaction': action});
let response = await fetch(url, {
method: 'GET',
headers: {
'Accept': 'application/json',
}
});
let data     = await response.json();
for (let method of Object.values(data.output.views))
$('.or-workbench-title .or-filtered > .or-link[data-method=\'' + method + '\']')
.parent()
.addClass('dropdown-entry--active')
.removeClass('dropdown-entry--inactive');
}
initializeStartupNotices() {
$('.or-act-initial-notice').each( function() {
let notice = new Notice();
notice.setStatus('info');
notice.msg = $(this).text();
notice.show();
});
}
initializeKeystrokes() {
let keyPressedHandler = (event) => {
if (event.key === 'F4') {
let dialog = this.createDialog();
dialog.start('', '', 'prop', 0, {});
}
if (event.key === 'F2') {
if ($('.or-workbench').hasClass('workbench--navigation-is-small'))
$('.or-act-nav-wide').click();
else
$('.or-act-nav-small').click();
}
if (event.code === 'Escape') {
this.closeDialog();
}
};
document.addEventListener('keydown',keyPressedHandler);
}
closeMenu() {
$('.or-menu').removeClass('menu--is-open');
}
initializeEvents() {
new Components().registerComponents();
$('body').click( () => {
this.closeMenu();
});
$('.or-dialog-filler,.or-act-dialog-close').click( (e) =>
{
e.preventDefault();
this.closeDialog();
}
);
$('.or-act-navigation-close').click( () => {
$('.or-workbench-navigation').removeClass('workbench-navigation--is-open');
$('.or-workbench').removeClass('workbench--navigation-is-open');
});
$('.or-workbench-title .or-act-nav-small').click( () => {
$('.or-workbench').addClass('workbench--navigation-is-small');
$('.or-workbench-navigation').addClass('workbench-navigation--is-small');
});
$('.or-search-input .or-input').orSearch( {
onSearchActive: function() {
$('.or-search').addClass('search--is-active');
},
onSearchInactive: function() {
$('.or-search').removeClass('search--is-active');
},
dropdown    : '.or-act-search-result',
resultEntryClass: 'search-result-entry',
//openDropdown: true, 
select      : function(obj) {
Workbench.getInstance().openNewAction( obj.name, obj.action, obj.id );
},
afterSelect: function() {
}
} );
$('.or-search .or-act-search-delete').click( () => {
$('.or-search .or-title-input').val('').input();
} );
Callback.afterNewActionHandler.add( function() {
$('.or-sidebar').find('.or-sidebar-button').orLinkify();
}
);
Callback.afterNewActionHandler.add( function() {
let url = View.createUrl('tree', 'path', Workbench.state.id, {'type': Workbench.state.action});
let loadPromise = fetch( url,{
method: 'GET',
headers: {
'Accept': 'text/html',
}
} );
function openNavTree(action, id) {
let $navControl = $('.or-link[data-action="'+action+'"][data-id="'+id+'"]').closest('.or-navtree-node');
if   ( $navControl.is( '.or-navtree-node--is-closed' ) )
$navControl.find('.or-navtree-node-control').click();
}
loadPromise
.then( response => response.text() )
.then( data => {
$('.or-breadcrumb').empty().html( data ).find('.or-act-clickable').orLinkify();
$('.or-breadcrumb a').each( function () {
let action = $(this).data('action');
let id     = $(this).data('id'    );
openNavTree( action, id );
});
$('.or-link--is-active').removeClass('link--is-active');
let action = Workbench.state.action;
let id     = Workbench.state.id;
if  (!id) id = '0';
$('.or-link[data-action=\''+action+'\'][data-id=\''+id+'\']').addClass('link--is-active');
openNavTree( action,id );
}).catch( cause => {
console.warn( {
message : 'Failed to load path',
url     : url,
cause   : cause } );
}).finally(function () {
});
} );
Callback.afterViewLoadedHandler.add( function(element) {
$(element).find('.or-button').orButton();
} );
Callback.afterViewLoadedHandler.add( function(element) {
if   ( Workbench.popupWindow )
$(element).find("a[data-type='popup']").each( function() {
Workbench.popupWindow.location.href = $(this).attr('data-url');
});
});
Callback.afterViewLoadedHandler.add( function(element) {
$(element).find(".or-input--password").dblclick( function() {
$(this).toggleAttr('type','text','password');
});
$(element).find(".or-act-make-visible").click( function() {
$(this).toggleClass('btn--is-active' );
$(this).parent().children('input').toggleAttr('type','text','password');
});
});
Callback.afterViewLoadedHandler.add( function($element) {
$element.find('.or-act-load-nav-tree').each( async function() {
let type = $(this).data('type') || 'root';
let loadBranchUrl = View.createUrl('tree', 'branch', 0, {type: type});
let $targetElement = $(this);
let response = await fetch( loadBranchUrl,{
method: 'GET',
headers: {
'Accept': 'text/html',
}
} );
let html     = await response.text();
let $ul = $.create('ul' ).addClass('navtree-list');
$ul.appendTo( $targetElement.empty() ).html( html );
$ul.find('li').orTree( {
'openAction': function( name,action,id) {
Workbench.getInstance().openNewAction( name,action,id );
}
} ); 
$ul.find('.or-act-clickable').orLinkify();
$ul.find('.or-navtree-node-control').first().click();
} );
} );
Callback.afterViewLoadedHandler.add( function(viewEl ) {
$(viewEl).find('.or-act-nav-open-close').click( function() {
$('.or-workbench').toggleClass('workbench--navigation-is-open');
$('.or-workbench-navigation').toggleClass('workbench-navigation--is-open');
});
$(viewEl).find('.or-act-nav-small').click( function() {
$('.or-workbench').addClass('workbench--navigation-is-small');
$('.or-workbench-navigation').addClass('workbench-navigation--is-small');
});
$(viewEl).find('.or-act-nav-wide').click( function() {
$('.or-workbench').removeClass('workbench--navigation-is-small');
$('.or-workbench-navigation').removeClass('workbench-navigation--is-small');
});
$(viewEl).find('.or-act-selector-tree-button').click( function() {
let $selector = $(this).parent('.or-selector');
let $targetElement = $selector.find('.or-act-load-selector-tree');
if   ( $selector.hasClass('selector--is-tree-active') ) {
$selector.removeClass('selector--is-tree-active');
$targetElement.empty();
}
else {
$selector.addClass('selector--is-tree-active');
var selectorEl = this;
let id   = $(this).data('init-folder-id');
let type = id?'folder':'projects';
let loadBranchUrl = './?action=tree&subaction=branch&id='+id+'&type='+type;
let load = fetch( loadBranchUrl,{
method: 'GET',
headers: {
'Accept': 'text/html',
}
} );
load
.then( response => response.text() )
.then( html => {
let $ul = $.create('ul' ).addClass('navtree-list');
$ul.appendTo( $targetElement ).html( html );
$ul.find('li').orTree(
{
'openAction' : function(name,action,id) {
$selector.find('.or-selector-link-value').val(id  );
$selector.find('.or-selector-link-name' ).val('').attr('placeholder',name);
$selector.removeClass('selector--is-tree-active');
$targetElement.empty();
}
}
); 
$ul.find('.or-act-clickable').orLinkify();
$ul.find('.or-navtree-node-control').first().click();
} );
}
} );
registerDragAndDrop(viewEl);
$(viewEl).find('.or-theme-chooser').change( function() {
Workbench.getInstance().setUserStyle( this.value );
});
function registerMenuEvents($element )
{
$($element).find('.or-menu-category').click( function(event) {
event.stopPropagation();
$(this).closest('.or-menu').toggleClass('menu--is-open');
});
$($element).find('.or-menu-category').mouseover( function() {
$(this).closest('.or-menu').find('.or-menu-category').removeClass('menu-category--is-open');
$(this).addClass('menu-category--is-open');
});
}
function registerSelectorSearch( $element )
{
$($element).find('.or-act-selector-search').orSearch( {
onSearchActive: function() {
$(this).parent('or-selector').addClass('selector-search--is-active');
},
onSearchInactive: function() {
$(this).parent('or-selector').removeClass('selector-search--is-active' );
},
dropdown: '.or-act-selector-search-results',
resultEntryClass: 'search-result-entry',
select: function(obj) {
$($element).find('.or-selector-link-value').val(obj.id  );
$($element).find('.or-selector-link-name' ).val(obj.name).attr('placeholder',obj.name);
},
afterSelect: function() {
$('.or-dropdown.or-act-selector-search-results').empty();
}
} );
}
function registerTree(element) {
}
registerMenuEvents    ( viewEl );
registerSelectorSearch( viewEl );
registerTree          ( viewEl );
function registerDragAndDrop(viewEl)
{
Workbench.getInstance().registerDraggable(viewEl);
Workbench.getInstance().registerDroppable(viewEl);
}
registerDragAndDrop(viewEl);
} );
};
static async addStyle( id, href ) {
return new Promise( (resolve,reject) => {
let styleEl = document.getElementById(id);
if (!styleEl) {
styleEl = document.createElement('link');
styleEl.addEventListener('load',resolve);
styleEl.setAttribute('rel', 'stylesheet');
styleEl.setAttribute('type', 'text/css');
styleEl.setAttribute('href', href);
styleEl.setAttribute('id', id);
document.getElementsByTagName('head')[0].appendChild(styleEl);
} else {
resolve();
}
} );
}
static async addScript( id, href ) {
return new Promise( (resolve,reject) => {
let scriptEl = document.getElementById( id );
if   ( ! scriptEl ) {
scriptEl = document.createElement( 'script' );
scriptEl.setAttribute('id'  ,id                       );
scriptEl.setAttribute('type','text/javascript'  );
scriptEl.addEventListener('load',resolve);
scriptEl.setAttribute('src',href );
document.getElementsByTagName('head')[0].appendChild(scriptEl);
} else {
resolve(); 
}
} );
}
}