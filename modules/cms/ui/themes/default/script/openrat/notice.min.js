import $ from  '../jquery-global.min.js';
import Workbench          from './workbench.min.js';
import Callback           from "./callback.min.js";
import WorkbenchNavigator from "./navigator.min.js";




export default class Notice  {

'use strict';

static type = Object.freeze({
warning: 0,
validation: 1,
info: 2,
success: 3,
error: 3,
loading: 3,
inactive: 4
});

constructor() {
this.typ  = '';
this.id   = 0;
this.name = '';
this.status = 'inactive';
this.msg  = '';
this.log  = '';
this.timeout = 0;

this.element = $.create('div')
.addClass('notice'                   )
.addClass('notice--is-inactive'      )
.addClass('collapsible'           )
.addClass('collapsible--is-closed');

this.onClick = new Callback();

}


before() {
};



close() {
this.element.remove();
}


setStatus( status ) {

this.element.removeClass('notice--' + this.status );
this.status = status;
this.element.addClass('notice--' + this.status );
}


inProgress() {

}

stopProgress() {

}

show() {

console.debug('user notice: ' + this.msg);
let notice = this;
this.element.removeClass('notice--is-inactive');

this.element.appendTo( $('.or-notice-container') ); 

let toolbar = $.create('div').addClass("notice-toolbar");
toolbar.appendTo(this.element);
toolbar.append( $.create('i').addClass('image-icon').addClass('image-icon--menu-close').addClass('act-notice-close') );

this.element.append( $.create('i').addClass('image-icon').addClass('image-icon--node-open'  ).addClass('collapsible--on-open'  ) );
this.element.append( $.create('i').addClass('image-icon').addClass('image-icon--node-closed').addClass('collapsible--on-closed') );
this.element.append( $.create('span').addClass('notice-text').addClass('collapsible-act-switch').text( Notice.htmlEntities(this.msg) ) );

if (this.name) {
this.element.append( $.create('div').addClass('notice-name').addClass('collapsible-value').append( $.create('a').addClass('act-clickable').attr('href',WorkbenchNavigator.createShortUrl(this.typ, this.id)).data('type',open).data('action',this.typ).data('id',this.id).append( $.create('i').addClass('notice-action-full').addClass('image-icon').addClass('image-icon--action-' + this.typ )).append( $.create('span').text(this.name ))).orLinkify() );
}

if (this.log)
this.element.append( $.create('div').addClass('notice-log').addClass('collapsible-value').append( $.create('pre').text(this.log)));

this.element.append( $.create('div').addClass('notice-date').addClass('collapsible-value').text(new Date().toLocaleTimeString()));



this.element.find('.or-notice-text').click( function () {
notice.onClick.fire();
} );

Workbench.registerOpenClose( this.element );


this.element.find('.or-act-notice-close').click(function () {
notice.close();
});


if   ( !this.timeout ) {
switch( this.status ) {
case 'ok'     : this.timeout =  3; break;
case 'info'   : this.timeout = 30; break;
case 'warning': this.timeout = 40; break;
case 'error'  : this.timeout = 50; break;
default:        this.timeout = 10; console.error('unknown notice status: '+this.status);
}
}

if (this.timeout) {


let timer = setTimeout(function () {
notice.close();
}, this.timeout * 1000);



this.element.click( function () {
window.clearTimeout( timer );
} );
}
}

setContext(type,id,name) {
this.typ  = type;
this.id   = id;
this.name = name;
}












start(type, id, name, status, msg, log = null, notifyTheBrowser = false) {


this.setContext(type,id,name);
this.msg = msg;
this.log = log;

if (notifyTheBrowser)
this.notifyBrowser(msg);  

this.setStatus(status);

}








notifyBrowser()
{
let text = this.msg;


if (!("Notification" in window)) {
return;
}


else if (Notification.permission === "granted") {

let notification = new Notification(text);
}


else if (Notification.permission !== 'denied') {
Notification.requestPermission(function (permission) {

if (permission === "granted") {
let notification = new Notification(text);
}
});
}



}









static htmlEntities( str ) {
return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}


static removeNoticesWithStatus( status) {
$('.or-notice-container').find('.or-notice--'+status).remove();
}

static removeAllNotices( status) {

$('.or-notice-container').find('.or-notice').remove();
}

}
