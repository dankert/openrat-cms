import $         from  '../jquery-global.min.js';
import Workbench from "./workbench.min.js";
import Notice    from "./notice.min.js";
import Callback  from "./callback.min.js";
import Api       from "./api.min.js";
export default class Form {
static modes = {
keepOpen           :  2,
closeAfterSubmit   :  4,
closeAfterSuccess  :  8,
};
constructor() {
this.onChangeHandler = new Callback();
this.onSaveHandler   = new Callback();
this.onCloseHandler  = new Callback();
this.forwardHandler  = new Callback();
this.async = false;
this.afterSuccess = '';
this.element = null;
this.autosave = false;
this.mode = Form.modes.keepOpen;
this.formMethod = 'GET';
this.forwardToMethod = null;
}
set isLoadStatus( isLoading ) {
if   ( isLoading )
Workbench.getInstance().startSpinner();
else
Workbench.getInstance().stopSpinner();
}
initOnElement( element ) {
this.element = element;
this.formMethod      = $(this.element).attr('method').toUpperCase();
this.afterSuccess    = $(this.element).data('afterSuccess');
this.forwardToMethod = $(this.element).data('forwardTo');
this.async           = $(this.element).data('async');
if   ( $(this.element).data('autosave') ) {
this.autosave = true;
$(this.element).find('input[type="checkbox"]').click( () => {
this.submit(Form.modes.keepOpen);
});
$(this.element).find('select').change( () => {
this.submit(Form.modes.keepOpen);
});
}
$(element).find('.or-act-form-cancel').click( () => {
this.cancel();
});
$(element).find('.or-act-form-reset').click( () => {
this.rollback();
});
$(element).find('.or-act-form-apply').click( () => {
this.submit(Form.modes.keepOpen);
});
$(element).find('.or-act-form-save').click( () => {
if   ( this.async )
this.submit( Form.modes.closeAfterSubmit );
else
this.submit( Form.modes.closeAfterSuccess );
});
$(element).find('.or-input').change( () => {
this.onChangeHandler.fire();
});
$(element).submit( ( event ) => {
if   ( this.async )
this.submit( Form.modes.closeAfterSubmit );
else
this.submit( Form.modes.closeAfterSuccess );
event.preventDefault();
});
}
cancel() {
Notice.removeAllNotices();
this.close();
}
rollback() {
this.element.nodes[0].reset();
}
forwardTo(action, subaction, id, data) {
this.forwardHandler.fire( action, subaction, id, data );
}
async submit( mode ) {
Notice.removeAllNotices();
let progressStatus = new Notice();
progressStatus.setStatus('info');
progressStatus.inProgress();
progressStatus.msg = Workbench.language.PROGRESS;
progressStatus.show();
this.removeErrorMarkers();
let formData = new FormData( $(this.element).get(0) );
if   (!formData.has('id') )
formData.append('id',Workbench.state.id);
if   (!formData.has('action') )
formData.append('action',Workbench.state.action);
if	( this.formMethod == 'GET' )
{
this.forwardTo( formData.get('action'), formData.get('subaction'),formData.get('id,'),formData );
progressStatus.close();
}
else
{
if	( mode == Form.modes.closeAfterSubmit )
this.close();
try {
await this.sendFormData( formData,mode );
}
catch( error ) {
}
finally {
progressStatus.close();
}
}
}
sendFormData = async function( formData,mode ) {
if   ( !this.async )
this.isLoadStatus = true;
let api = new Api();
api.notifyBrowser = this.async;
api.validationErrorForField = (name) => {
$('.or-input[name='+name+']').addClass('input--error').parent().addClass('input--error').parents('.or-group').removeClass('closed').addClass('show').addClass('open');
}
try {
await api.sendData( formData );
this.onSaveHandler.fire();
if (mode == Form.modes.closeAfterSuccess) {
this.close();
}
if (this.afterSuccess) {
if (this.afterSuccess == 'reloadAll') {
Workbench.getInstance().reloadAll();
} else if (this.afterSuccess == 'forward') {
if (this.forwardToMethod)
this.forwardTo(formData.get('action'), this.forwardToMethod, formData.get('id'), []);
}
} else {
if (this.async)
; 
else
Workbench.getInstance().reloadViews();
}
Callback.dataChangedHandler.fire();
} finally {
this.isLoadStatus = false;
}
}
close = function() {
this.onCloseHandler.fire();
}
removeErrorMarkers = function() {
$(this.element).find('.or-input--error').removeClass('input--error');
}
}