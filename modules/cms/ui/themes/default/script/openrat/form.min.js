import $         from  '../jquery-global.min.js';
import Workbench from "./workbench.min.js";
import Notice    from "./notice.min.js";
import Callback  from "./callback.min.js";
import Api       from "./api.min.js";
export default class Form {
static modes = {
showBrowserNotice  : 1,
keepOpen           : 2,
closeAfterSubmit   : 4,
closeAfterSuccess  : 8,
};
constructor() {
this.onChangeHandler = new Callback();
this.onSaveHandler   = new Callback();
this.onCloseHandler  = new Callback();
this.async = false;
this.afterSuccess = '';
this.element = null;
this.autosave = false;
this.mode = Form.modes.keepOpen;
this.formMethod = 'GET';
this.forwardToMethod = null;
}
setLoadStatus( isLoading ) {
if   ( isLoading )
Workbench.getInstance().startSpinner();
else
Workbench.getInstance().stopSpinner();
}
initOnElement( element ) {
this.element = element;
this.formMethod    = $(this.element).attr('method').toUpperCase();
this.afterSuccess  = $(this.element).data('afterSuccess');
this.forwardToMethod = $(this.element).data('forwardTo');
this.async         = $(this.element).data('async');
let form = this;
if   ( $(this.element).data('autosave') ) {
this.autosave = true;
$(this.element).find('input[type="checkbox"]').click( function() {
form.submit(Form.modes.keepOpen);
});
$(this.element).find('select').change( function() {
form.submit(Form.modes.keepOpen);
});
}
$(element).find('.or-act-form-cancel').click( function() {
form.cancel();
});
$(element).find('.or-act-form-reset').click( function() {
form.rollback();
});
$(element).find('.or-act-form-apply').click( function() {
form.submit(Form.modes.keepOpen);
});
$(element).find('.or-act-form-save').click( function() {
form.submit();
});
$(element).find('.or-input').change( function() {
form.onChangeHandler.fire();
});
$(element).submit( function( event ) {
if   ($(this).data('target')=='view')
{
form.submit();
event.preventDefault();
}
});
}
cancel() {
Notice.removeAllNotices();
this.onCloseHandler.fire();
}
rollback() {
this.element.trigger('reset');
}
forwardTo(action, subaction, id, data) {
}
submit( mode ) {
if   ( mode === undefined )
if   ( this.async )
mode = Form.modes.closeAfterSubmit;
else
mode = Form.modes.closeAfterSuccess;
Notice.removeAllNotices();
let status = new Notice();
status.setStatus('info');
status.inProgress();
status.msg = Workbench.language.PROGRESS;
status.show();
$(this.element).find('.or-input--error').removeClass('input--error');
let formData = new FormData( $(this.element).get(0) );
if   (!formData.has('id') )
formData.append('id',Workbench.state.id);
if   (!formData.has('action') )
formData.append('action',Workbench.state.action);
if	( this.formMethod == 'GET' )
{
this.forwardTo( formData.get('action'), formData.get('subaction'),formData.get('id,'),formData );
$(status).remove();
}
else
{
if	( mode == Form.modes.closeAfterSubmit )
this.onCloseHandler.fire();
formData.append('output','json');
this.sendFormData( formData );
status.close();
}
}
sendFormData = function( formData ) {
this.setLoadStatus(true);
let form = this;
let api = new Api();
api.notifyBrowser = form.async;
api.validationErrorForField = (name) => {
$('.or-input[name='+name+']').addClass('input--error').parent().addClass('input--error').parents('.or-group').removeClass('closed').addClass('show').addClass('open');
}
let result = api.sendData( formData );
let mode = 0;
result.then(
() => {
form.onSaveHandler.fire();
if (this.afterSuccess == 'forward')
mode = Form.modes.keepOpen;
if (mode == Form.modes.closeAfterSuccess) {
form.onCloseHandler.fire();
$(form.element).closest('div.panel').find('div.header ul.views li.action.active').removeClass('dirty');
}
if (form.afterSuccess) {
if (form.afterSuccess == 'reloadAll') {
Workbench.getInstance().reloadAll();
} else if (form.afterSuccess == 'forward') {
if (form.forwardToMethod)
form.forwardTo(formData.get('action'), form.forwardToMethod, formData.get('id'), []);
}
} else {
if (async)
; 
else
Workbench.getInstance().reloadViews();
}
Callback.dataChangedHandler.fire();
}
).catch( (reason) => {
}).finally( () => {
form.setLoadStatus(false);
})
}
}